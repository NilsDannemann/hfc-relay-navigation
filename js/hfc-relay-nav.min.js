'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var HFCRelayNav = function () {
  function HFCRelayNav() {
    _classCallCheck(this, HFCRelayNav);

    this.options = {
      vpHeight: false,
      vpWidth: false
    };
  }

  _createClass(HFCRelayNav, [{
    key: 'init',
    value: function init(sel, options) {
      var root = this;

      // Settings options
      root._setViewport(); // assigning viewport options

      // merging options from the initialization
      root.options = Object.assign(root.options, options);

      /**
       *  Toggle dropdown
       */
      var selector = document.querySelector(sel);
      var submenu = selector.querySelectorAll('.has-submenu');
      Array.from(submenu).forEach(function (item) {
        item.getElementsByTagName('a')[0].addEventListener('click', function (event) {
          var parent = event.target.parentNode;

          root._toggleClass(parent, 'is-open');
          root._toggleClass(parent.querySelector('ul'), 'show');
        });
      });

      /*
       * Remove when clicked outside dropdown
       */
      document.addEventListener('click', function (event) {
        if (!root._getClosest(event.target, '.has-submenu') && event.target !== event.target.querySelector('.has-submenu')) {
          Array.from(submenu).forEach(function (item) {
            item.classList.remove('is-open');
            item.querySelector('ul').classList.remove('show');
          });
        }
      });
    }
  }, {
    key: '_toggleClass',

    /**
     * Toggle class on element
     * @param el
     * @param className
     */
    value: function _toggleClass(el, className) {
      var root = this;

      if (el.classList) {
        el.classList.toggle(className);
      } else {
        var classes = el.className.split(' ');
        var existingIndex = classes.indexOf(className);

        if (existingIndex >= 0) {
          classes.splice(existingIndex, 1);
        } else {
          classes.push(className);
        }

        el.className = classes.join(' ');
      }
    }
  }, {
    key: '_setViewport',

    /**
     *  Returns the viewport width and height
     */
    value: function _setViewport(mode) {
      var root = this;

      var viewport = [];
      var height = false;
      var width = false;

      ['Width', 'Height'].map(function (name) {
        var docVal = document.documentElement['client' + name];
        var winVal = window['inner' + name];
        var number = Math.min(docVal, winVal);

        eval('root.options.vp' + name + ' = ' + number);
      });
    }
  }, {
    key: '_getClosest',

    /**
     * Get the closest matching element up the DOM tree
     * @param {Element} elem Starting element
     * @param {String} selector Selector to match against (class, ID, or data attribute)
     * @return {Boolean|Element} Returns false if not match found
     */
    value: function _getClosest(elem, selector) {
      var firstChar = selector.charAt(0);
      for (; elem && elem !== document; elem = elem.parentNode) {
        if (firstChar === '.') {
          if (elem.classList.contains(selector.substr(1))) {
            return elem;
          }
        } else if (firstChar === '#') {
          if (elem.id === selector.substr(1)) {
            return elem;
          }
        } else if (firstChar === '[') {
          if (elem.hasAttribute(selector.substr(1, selector.length - 2))) {
            return elem;
          }
        }
      }

      return false;
    }
  }]);

  return HFCRelayNav;
}();